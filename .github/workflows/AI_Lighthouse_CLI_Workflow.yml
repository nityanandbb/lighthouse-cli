name: "🚀 AI + Lighthouse Audit CLI Workflow"

on:
  workflow_dispatch:
    inputs:
      aiAnalysis:
        description: "🧠 Enable AI Analysis? (yes / no)"
        required: true
        default: "no"
      mode:
        description: |
          🎯 Select Test Mode:
          1: Auto Extract (Hover + Heuristics)
          2: CSS Selector
          3: XPath Selector
          4: Raw URL List
          5: All Anchor Tags
        required: true
        default: "1"
      baseUrl:
        description: "🌐 Base URL (Required for modes 1, 2, 3, 5)" 
        required: false
      selector:
        description: "🎯 CSS or XPath selector (Required for mode 2 and 3)"
        required: false
      rawInput:
        description: "📄 Raw space-separated URLs (Required for mode 4)"
        required: false
      projectName:
        description: "📦 Project Name"
        required: false
        default: "Internal"
      client:
        description: "👤 Client Name"
        required: false
        default: "Internal"
      projectManager:
        description: "🧑‍💼 Project Manager"
        required: false
        default: "Kunal"
      qaManager:
        description: "🧪 QA Manager"
        required: false
        default: "Archana"
      expectedLoadTime:
        description: "⏱️ Expected Load Time (e.g., '3 seconds')"
        required: false
        default: "3 seconds"

jobs:
  setup-and-execute:
    runs-on: ubuntu-22.04

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "^18.3 || ^20.18.1"

      - name: 📦 Install Dependencies
        run: npm install

      - name: 📦 Install Puppeteer for dynamic modes (1/2/3/5)
        if: ${{ env.MODE != '4' }}
        run: npm install puppeteer

      - name: 🧪 Validate Inputs & Export Env
        run: |
          echo -e "\033[1;34m🔍 Validating Inputs...\033[0m"
          ai="${{ github.event.inputs.aiAnalysis }}"
          mode="${{ github.event.inputs.mode }}"
          baseUrl="${{ github.event.inputs.baseUrl }}"
          selector="${{ github.event.inputs.selector }}"
          rawInput="${{ github.event.inputs.rawInput }}"

          # Validate AI toggle
          if [[ "$ai" == "yes" ]]; then
            echo "AI_ANALYSIS=true" >> $GITHUB_ENV
          else
            echo "AI_ANALYSIS=false" >> $GITHUB_ENV
          fi

          # Validate mode
          if ! [[ "$mode" =~ ^[1-5]$ ]]; then
            echo -e "\033[0;31m❌ Invalid mode selected: $mode. Must be 1–5.\033[0m"
            exit 1
          fi

          # Mode-specific validation
          if [[ "$mode" =~ ^[1|2|3|5]$ && -z "$baseUrl" ]]; then
            echo -e "\033[0;31m❌ baseUrl is required for mode $mode.\033[0m"
            exit 1
          fi
          if [[ "$mode" =~ ^[2|3]$ && -z "$selector" ]]; then
            echo -e "\033[0;31m❌ selector is required for mode $mode.\033[0m"
            exit 1
          fi
          if [[ "$mode" == "4" && -z "$rawInput" ]]; then
            echo -e "\033[0;31m❌ rawInput is required for mode 4.\033[0m"
            exit 1
          fi

          # Export variables
          echo "MODE=$mode" >> $GITHUB_ENV
          echo "BASE_URL=$baseUrl" >> $GITHUB_ENV
          echo "SELECTOR=$selector" >> $GITHUB_ENV
          echo "RAW_INPUT=$rawInput" >> $GITHUB_ENV
          echo "PROJECT_NAME=${{ github.event.inputs.projectName }}" >> $GITHUB_ENV
          echo "CLIENT=${{ github.event.inputs.client }}" >> $GITHUB_ENV
          echo "PROJECT_MANAGER=${{ github.event.inputs.projectManager }}" >> $GITHUB_ENV
          echo "QA_MANAGER=${{ github.event.inputs.qaManager }}" >> $GITHUB_ENV
          echo "EXPECTED_LOAD_TIME=${{ github.event.inputs.expectedLoadTime }}" >> $GITHUB_ENV

          echo -e "\033[1;32m✅ All inputs validated and exported.\033[0m"
          echo "------------------------------------------"
          echo "🎯 Mode: $mode"
          echo "🌐 Base URL: $baseUrl"
          echo "🔎 Selector: $selector"
          echo "📄 Raw Input: $rawInput"
          echo "🧠 AI Analysis: $ai"
          echo "------------------------------------------"

      - name: 🔧 Prepare URL List
        run: |
          echo -e "\033[1;34m🔧 Building URL list...\033[0m"
          if [[ "$MODE" == "4" ]]; then
            echo "$RAW_INPUT" | tr ' ' '\n' > urlList.txt
          else
            node core/githubTestUrlBuilder.js
            test -f TestURL.js && echo "✅ TestURL.js found" || echo "❌ TestURL.js missing"
          fi

  debug-testurl:
    needs: build-url-list
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: 🧪 Checkout code
        uses: actions/checkout@v4
      
      - name: 🧪 List files recursively
        run: |
          echo -e "\033[1;33m📂 Searching for TestURL.js...\033[0m"
          find . -name "TestURL.js"
          
      - name: 🧪 Tree view for debugging
        run: |
          echo -e "\033[1;36m📁 Directory structure:\033[0m"
          tree -a -L 3 || true

      - name: 🚀 Run Lighthouse Tests
        run: |
          echo -e "\033[1;36m📡 Starting Lighthouse audit...\033[0m"

          if [[ "$MODE" == "4" ]]; then
            echo -e "\033[1;33m🔗 Mode 4 selected — using rawInput via executeGithub.js...\033[0m"
            node executeGithub.js
          else
            echo -e "\033[1;34m🧠 Mode $MODE — using generated TestURL.js via runLighthouseAuto.js...\033[0m"
            node runLighthouseAuto.js
          fi

          echo -e "\033[1;32m✅ Lighthouse audit complete.\033[0m"

      - name: ⏳ Wait for Reports
        run: |
          echo -e "⌛ Sleeping 40s to allow report generation..."
          sleep 40

      - name: 📂 Move Reports to Reports_QA
        run: |
          mkdir -p ./Reports_QA
          mv *.html ./Reports_QA/ 2>/dev/null || true
          mv *.pdf ./Reports_QA/ 2>/dev/null || true
          mv ./results/*.csv ./Reports_QA/ 2>/dev/null || true
          echo -e "\033[1;32m✅ Reports moved to Reports_QA\033[0m"

      - name: 📤 Upload Reports as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-csv-html-reports
          path: ./Reports_QA/*

      - name: 📦 Upload Lighthouse Full Results 
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-full-results 
          path: ./.lighthouseci/*
 