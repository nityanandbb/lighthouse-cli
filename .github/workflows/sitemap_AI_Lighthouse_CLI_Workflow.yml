name: "‚õ≥Ô∏è üó∫Ô∏è üöÄ Sitemap AI + Lighthouse Audit CLI"

on:
  workflow_dispatch:
    inputs:
      # ====== Run selector ======
      runType:
        description: "üß≠ What do you want to run?"
        type: choice
        options: [ "sitemap", "css" ]
        default: "sitemap"
        required: true

      # ====== Base URL (shown first; required) ======
      baseUrl:
        description: "üåê Base URL (Sitemap, CSS 1/2/3/5). Example: https://www.example.com"
        default: ""
        required: true

      # ====== Sitemap section ======
      sitemapMode:
        description: "üó∫Ô∏è Sitemap mode ‚Äî 1:Sample  2:Only subpath  3:StartWith+Contains  4:Contains+Contains  5:Contains OR  6:Multi-domain"
        type: choice
        options: ["1","2","3","4","5","6"]
        default: "1"
        required: true

      sitemapPreset:
        description: "üß© Sample preset"
        type: choice
        options: [ "50x5", "200x10", "custom" ]
        default: "50x5"
      targetTotal:
        description: "üéØ Custom target (when preset=custom)"
        default: "50"
      perGroup:
        description: "üß± Custom per-group (when preset=custom)"
        default: "5"

      # Filters for sitemap modes 2‚Äì6 (optional)
      startWith:
        description: "‚ÜòÔ∏è PATH starts with (OR). e.g. /en/ /services/"
        default: ""
      containsAny:
        description: "üîé PATH contains ANY (OR). e.g. insights sku_ id"
        default: ""
      containsAll:
        description: "‚úÖ PATH contains ALL (AND). e.g. /en/ /insights/"
        default: ""
      exclude:
        description: "üö´ Exclude prefixes. e.g. /blog/ /news/"
        default: ""
      includeRe:
        description: "üî¨ Include regex (PATH)"
        default: ""
      excludeRe:
        description: "üî¨ Exclude regex (PATH)"
        default: ""

      # Host rules (global brands; sitemap mode 6)
      allowSubdomains:
        description: "üåç Allow subdomains of base host?"
        type: choice
        options: [ "false", "true" ]
        default: "false"
      allowHosts:
        description: "üåê Extra hosts (space/comma/newline). e.g. api.example.com media.example.com"
        default: ""
      hostRe:
        description: "üß™ Host allow regex. e.g. .*\\.brand\\.(com|co\\.uk|de)$"
        default: ""

      # Performance (sitemap traversal)
      skipValidate:
        description: "‚ö° Skip HTTP 200 validation (faster)"
        type: choice
        options: [ "false", "true" ]
        default: "false"
      concurrency:
        description: "üö¶ Concurrency (8‚Äì16 typical)"
        default: "8"
      maxSitemaps:
        description: "üß± Max sitemap files to traverse"
        default: "1000"

      # ====== CSS/XPath runner section ======
      cssMode:
        description: "üéØ CSS/XPath ‚Äî 1:Auto(anchors)  2:CSS  3:XPath  4:Raw list  5:All anchors"
        type: choice
        options: ["1","2","3","4","5"]
        default: "2"
        required: true
      selector:
        description: "üéØ CSS/XPath selector (required for cssMode=2/3)"
        default: ""
        required: false

      # Handy presets that autofill 'selector' if left blank
      cssPreset:
        description: "üîß CSS preset (optional; fills 'selector' if empty)"
        type: choice
        options:
          - ""
          - "Nav links (.nav a)"
          - "Footer links (footer a)"
          - "Article links (.article a)"
          - "Buttons (a.button)"
          - "All anchors (a[href])"
        default: ""

      rawInput:
        description: "üìÑ Space-separated URLs (required for cssMode=4)"
        default: ""
        required: false

      # ====== Project meta ======
      projectName:    { description: "üì¶ Project Name",     default: "Internal" }
      client:         { description: "üë§ Client Name",      default: "Internal" }
      projectManager: { description: "üßë‚Äçüíº Project Manager", default: "Kunal" }
      qaManager:      { description: "üß™ QA Manager",       default: "Archana" }
      expectedLoadTime:
        description: "‚è±Ô∏è Expected Load Time"
        default: "3 seconds"

      # ====== Help toggle ======
      showHelp:
        description: "üìñ Print quick examples in job logs?"
        type: choice
        options: [ "false", "true" ]
        default: "false"

jobs:
  setup-and-execute:
    runs-on: ubuntu-22.04

    steps:
      - name: ‚¨áÔ∏è Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üß™ Validate Inputs & Export Env
        shell: bash
        run: |
          set -euo pipefail
          echo -e "\033[1;34müîç Validating Inputs...\033[0m"

          runType="${{ github.event.inputs.runType }}"
          baseUrl="${{ github.event.inputs.baseUrl }}"
          sitemapMode="${{ github.event.inputs.sitemapMode }}"
          cssMode="${{ github.event.inputs.cssMode }}"
          selector="${{ github.event.inputs.selector }}"
          cssPreset="${{ github.event.inputs.cssPreset }}"
          rawInput="${{ github.event.inputs.rawInput }}"
          showHelp="${{ github.event.inputs.showHelp }}"

          # Simple booleans for clarity
          if [[ "$runType" == "sitemap" ]]; then
            echo "RUN_SITEMAP=true" >> "$GITHUB_ENV"
            echo "RUN_CSS=false" >> "$GITHUB_ENV"
            MODE="1"
          else
            echo "RUN_SITEMAP=false" >> "$GITHUB_ENV"
            echo "RUN_CSS=true" >> "$GITHUB_ENV"
            case "$cssMode" in
              "1") MODE="5" ;;  # auto ‚Üí anchors
              "2") MODE="2" ;;  # CSS
              "3") MODE="3" ;;  # XPath
              "4") MODE="4" ;;  # Raw
              "5") MODE="5" ;;  # Anchors
              *) echo "‚ùå Invalid cssMode: $cssMode"; exit 1 ;;
            esac
          fi

          # Base URL required unless cssMode=4 (raw)
          if [[ "$MODE" != "4" && -z "$baseUrl" ]]; then
            echo "‚ùå baseUrl is required."; exit 1;
          fi

          # If selector empty, apply preset (only for CSS modes)
          if [[ -z "$selector" && "$MODE" == "2" ]]; then
            case "$cssPreset" in
              "Nav links (.nav a)") selector=".nav a" ;;
              "Footer links (footer a)") selector="footer a" ;;
              "Article links (.article a)") selector=".article a" ;;
              "Buttons (a.button)") selector="a.button" ;;
              "All anchors (a[href])") selector="a[href]" ;;
            esac
          fi

          # Validate CSS specifics
          if [[ "$MODE" == "2" && -z "$selector" ]]; then echo "‚ùå CSS selector required (cssMode=2)"; exit 1; fi
          if [[ "$MODE" == "3" && -z "$selector" ]]; then echo "‚ùå XPath selector required (cssMode=3)"; exit 1; fi
          if [[ "$MODE" == "4" && -z "$rawInput" ]]; then echo "‚ùå rawInput required (cssMode=4)"; exit 1; fi

          # Export env for builders/runners
          {
            echo "MODE=$MODE"
            echo "BASE_URL=$baseUrl"
            echo "SELECTOR=$selector"
            echo "RAW_INPUT=$rawInput"
            echo "TESTFILES_LIST=$rawInput"

            # Sitemap knobs & filters
            echo "SITEMAP_MODE=${{ github.event.inputs.sitemapMode }}"
            echo "SITEMAP_PRESET=${{ github.event.inputs.sitemapPreset }}"
            echo "TARGET_TOTAL=${{ github.event.inputs.targetTotal }}"
            echo "PER_GROUP=${{ github.event.inputs.perGroup }}"
            echo "START_WITH=${{ github.event.inputs.startWith }}"
            echo "CONTAINS_ANY=${{ github.event.inputs.containsAny }}"
            echo "CONTAINS_ALL=${{ github.event.inputs.containsAll }}"
            echo "EXCLUDE=${{ github.event.inputs.exclude }}"
            echo "INCLUDE_RE=${{ github.event.inputs.includeRe }}"
            echo "EXCLUDE_RE=${{ github.event.inputs.excludeRe }}"
            echo "ALLOW_SUBDOMAINS=${{ github.event.inputs.allowSubdomains }}"
            echo "ALLOW_HOSTS=${{ github.event.inputs.allowHosts }}"
            echo "HOST_RE=${{ github.event.inputs.hostRe }}"
            echo "SKIP_VALIDATE=${{ github.event.inputs.skipValidate }}"
            echo "CONCURRENCY=${{ github.event.inputs.concurrency }}"
            echo "MAX_SITEMAPS=${{ github.event.inputs.maxSitemaps }}"

            # Meta
            echo "PROJECT_NAME=${{ github.event.inputs.projectName }}"
            echo "CLIENT=${{ github.event.inputs.client }}"
            echo "PROJECT_MANAGER=${{ github.event.inputs.projectManager }}"
            echo "QA_MANAGER=${{ github.event.inputs.qaManager }}"
            echo "EXPECTED_LOAD_TIME=${{ github.event.inputs.expectedLoadTime }}"
          } >> "$GITHUB_ENV"

          echo -e "\033[1;32m‚úÖ Inputs OK\033[0m"
          echo "üîÅ runType=$runType | RUN_SITEMAP=$RUN_SITEMAP | RUN_CSS=$RUN_CSS | MODE=$MODE"
          echo "üåê baseUrl=$baseUrl | cssMode=$cssMode | sitemapMode=$sitemapMode | selector='${selector:-N/A}'"

          # Optional helper text in logs
          if [[ "$showHelp" == "true" ]]; then
            echo ""
            echo "üìñ QUICK EXAMPLES (SITEMAP)"
            echo "1) Sample (50x5 or 200x10): set preset, no filters."
            echo "2) Only subpath: startWith='/services/'"
            echo "3) StartWith+Contains: startWith='/en/' containsAny='insights'"
            echo "4) Contains+Contains: containsAll='/en/ /insights/'"
            echo "5) Contains OR: containsAny='services careers products'"
            echo "6) Multi-domain: allowSubdomains='true' or hostRe='.*\\.brand\\.(com|co\\.uk)$'"
            echo ""
            echo "üìñ QUICK EXAMPLES (CSS)"
            echo "2) CSS: selector='.nav a' (or use cssPreset)"
            echo "3) XPath: selector='//a[@href]'"
            echo "5) Anchors: cssMode=5"
            echo "4) Raw: paste URLs into 'rawInput'"
            echo ""
          fi

      - name: üì¶ Install Puppeteer for CSS/XPath/Anchors
        if: ${{ env.RUN_CSS == 'true' && (env.MODE == '2' || env.MODE == '3' || env.MODE == '5') }}
        run: npm i puppeteer

      - name: üîß Prepare URL List
        shell: bash
        run: |
          set -euo pipefail
          echo -e "\033[1;34müîß Building URL list...\033[0m"

          if [[ "$MODE" == "4" ]]; then
            # Raw list
            echo "$RAW_INPUT" | tr ' ' '\n' > urlList.txt
            node -e 'const fs=require("fs");const u=String(process.env.RAW_INPUT||"").split(/[ \n]+/).filter(Boolean);fs.writeFileSync("TestURL.js","exports.urls = "+JSON.stringify(u,null,2)+";\\n")'
            test -f TestURL.js && echo "‚úÖ TestURL.js from raw input" || (echo "‚ùå TestURL.js missing" && exit 1)

          elif [[ "$RUN_SITEMAP" == "true" ]]; then
            # Mode 1 ‚Äî sitemap (dedicated helper; your existing code untouched)
            node core/sitemapUrlBuilder.js
            test -f "TestURL.js" && echo "‚úÖ TestURL.js from sitemap" || (echo "‚ùå TestURL.js missing" && exit 1)

          else
            # CSS/XPath/Anchors via your existing builder
            node core/githubTestUrlBuilder.js
            test -f "TestURL.js" && echo "‚úÖ TestURL.js from CSS runner" || (echo "‚ùå TestURL.js missing" && exit 1)
          fi

      - name: üöÄ Run Lighthouse Tests
        shell: bash
        run: |
          set -euo pipefail
          echo -e "\033[1;36müì° Starting Lighthouse...\033[0m"
          if [[ "$MODE" == "4" ]]; then
            echo -e "\033[1;33müîó Raw list ‚Äî executeGithub.js\033[0m"
            node executeGithub.js
          else
            echo -e "\033[1;34müß† MODE $MODE ‚Äî runLighthouseAuto.js (reads TestURL.js)\033[0m"
            node runLighthouseAuto.js
          fi
          echo -e "\033[1;32m‚úÖ Lighthouse complete.\033[0m"

      - name: ‚è≥ Wait for Reports
        run: |
          echo -e "‚åõ Sleeping 40s to allow report generation..."
          sleep 40

      - name: üìÇ Move Reports to Reports_QA
        run: |
          mkdir -p ./Reports_QA
          mv *.html ./Reports_QA/ 2>/dev/null || true
          mv *.pdf ./Reports_QA/ 2>/dev/null || true
          mv ./results/*.csv ./Reports_QA/ 2>/dev/null || true
          echo -e "\033[1;32m‚úÖ Reports moved to Reports_QA\033[0m"

      - name: üì§ Upload Reports as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-csv-html-reports
          path: ./Reports_QA/*

      - name: üì¶ Upload Lighthouse Full Results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-full-results
          path: ./.lighthouseci/*
